---

- import_tasks: requirements.yml

- name: /etc/eos
  file: 
    path: /etc/eos
    state: directory

- name: check binary installation
  stat: 
    path: "{{ nodeos_path }}"
  register: nodeos

- name: fetch version of nodeos
  command: "{{ nodeos_path }} --version"
  register: nodeos_version
  failed_when: nodeos_version.rc != 255
  when: nodeos.stat.exists == True

- name: clone repo eos
  git:
    repo: "{{ repo }}"
    recursive: no
    dest: /opt/eos
    update: yes
    version: "{{ version }}"
    track_submodules: yes
    force: yes
  when: nodeos_version.stdout is not defined or version not in nodeos_version.stdout

- name: submodules
  shell: cd /opt/eos && git submodule update --init --recursive
  when: nodeos_version.stdout is not defined or version not in nodeos_version.stdout

- name: exec eosio_build.sh
  expect:
    chdir: /opt/eos
    command: /bin/bash /opt/eos/eosio_build.sh -s EOS
    responses:
      \?: 1
    timeout: 7200
  async: 7200
  poll: 10
  when: nodeos_version.stdout is not defined or version not in nodeos_version.stdout

- name: link binaries
  shell: "ln -s /opt/eos/build/programs/{{ item }}/{{ item }} /usr/local/bin/{{ item }}"
  with_items:
    - nodeos
    - cleos
    - keosd
  when: nodeos.stat.exists == False

- name: disable timedatectl
  shell: timedatectl set-ntp no
  tags:
    - time

- name: make sure ntp is installed
  apt: name=ntp state=installed
  tags:
    - time

- name: Add user
  user:
    name: "{{ ops_user }}"
    shell: /bin/bash
    groups: sudo
    state: present
    home: "/home/{{ ops_user }}"